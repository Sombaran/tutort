/*
https://leetcode.com/problems/two-sum/
*/

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int i{0},j{0};
        for (i=0;i<nums.size();++i) {
            std::cout << nums[i] << " ";
            for (j = i+1;j<nums.size();++j) {
                if (nums[i] + nums[j] == target) {
                    //break;
                    return {i,j};
                }
            }
        }
        return{i,j};
    }
};

/*
https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/
*/

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> output{};
        int size = (numbers.size()-1);
        int i{}, j{size},sum {};
        output.clear();
        
        while(i<j){
            sum=numbers[i]+numbers[j];
            std::cout << sum << std::endl;
            if (sum == target) {
                output.push_back(i+1);
                output.push_back(j+1);
            }
            if (sum<target){
                std::cout << "If \n";
                i++;
            } else {
                std::cout << "Else \n";
                j--;
            }
        }
        return {output};
    }
};

/*
https://leetcode.com/problems/merge-sorted-array/description/
*/

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        for (int i=0;i<n;++i){
            nums1[m+i] = nums2[i];
        }
        for (const auto& i:nums1) {
            std::cout << i << " ";
        }
        std::cout << std::endl;
        std::sort(nums1.begin(),nums1.end());
    }
};

/*
https://leetcode.com/problems/pascals-triangle/
*/

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> generateAns{};
        for (int i=0;i<numRows;++i){
            std::vector<int> rowVector(i+1);
            rowVector[0] =1;
            rowVector[i] =1;
            for (int j=1;j<i;++j){
                rowVector[j] = generateAns[i-1][j] + generateAns[i-1][j-1];
            }
            generateAns.push_back(rowVector);
        }
        return (generateAns);
    }
};

/*
https://leetcode.com/problems/pascals-triangle-ii/description/
*/

class Solution {
public:
    vector<int> getRow(int row) {
        //row starts from 0, means 3rd row will have 4 elements
        vector<int> ans(row+1,1);

        long prev=1;
        for(int j=1;j<=row-1;j++){
            prev = prev * (row-j+1) / j;  
            ans[j] = prev; 
        } 
        return ans;   
    }
};

/*
https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
*/

/*
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/
*/

/*
https://leetcode.com/problems/majority-element/
*/

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int returnValue{};
        int majorityElement = nums.size()/2;
        std::unordered_map<int, int> uMp{};

        for (int i=0;i<nums.size();++i){
            uMp[nums[i]]++;
        }

        for (const auto& i : uMp){
            if (i.second > majorityElement) {
                returnValue = i.first;
            }
        }
        return (returnValue);
    }
};

/*
https://leetcode.com/problems/majority-element-ii/
*/

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        std::vector<int> returnValue{};
        int majorityElement = nums.size()/3;

        std::unordered_map<int, int> uMp{};

        for (int i=0;i<nums.size();++i){
            uMp[nums[i]]++;
        }

        for (const auto& i : uMp){
            if (i.second > majorityElement) {
                //returnValue = i.first;
                returnValue.push_back(i.first);
            }
        }
        return (returnValue);
        
    }
};


/*
https://leetcode.com/problems/missing-ranges/ 
*/


/*
https://leetcode.com/problems/3sum/
*/


/*
https://leetcode.com/problems/3sum-smaller/ 
*/


/*
https://leetcode.com/problems/3sum-closest/
*/


/*
https://leetcode.com/problems/4sum/
*/


/*
https://leetcode.com/problems/rotate-image/
*/

