/*
https://leetcode.com/problems/power-of-two/
*/

class Solution {
public:
    bool isPowerOfTwo(int n) {
        bool flag {false};
        for (int i=0;i<100;++i){
            if (pow(2,i) == n) {
                flag = true;
            }
        }
        return flag;
    }
};

/*
https://leetcode.com/problems/valid-anagram/
*/

class Solution {
public:
    bool isAnagram(string s, string t) {
        bool flag{false};
        int i{},j{};
        std::unordered_map<char, int> m1{},m2{};
        
        std::unordered_map<char, int>::iterator it1 = m1.begin();
        std::unordered_map<char, int>::iterator it2 = m2.begin();

        for (i=0;i<s.length();++i) {
            m1[s[i]]++;
        }

        for (j=0;j<t.length();++j) {
            m2[t[j]]++;
        }
        /*if ( m1[s[i]]++ ==  m2[t[j]]++) {
            flag = true;
        } else {
            flag = false;
        }*/

        if (m1 == m2 /*it1->first == it2-> first && it1->second == it2->second*/) {
            flag = true;
            std::cout << "match key \n";
        } else {
            flag = false;
            std::cout << "no match key \n";
        }
        return (flag);    
    }
};

/*
https://leetcode.com/problems/move-zeroes/
*/

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        std::vector<int> output{};
        int i{};
        int size=nums.size();
        std::cout << size << std::endl;
        int counter{0};
        for (i=0;i<size;++i) {
            if (nums[i] == 0) {
                ++counter;
                //break;
                nums.erase(nums.begin() + i);
                --i;
                --size;
            }
        }
        for (int i = 0; i < counter;++i) {
            nums.push_back(0);
    }
        std::cout << std::endl;
        return;
    }
};

/*

*/