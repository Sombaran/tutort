1.
int a = 0, b = 0;
for (i = 0; i < N; i++) {
a = a + rand();
}
for (j = 0; j < M; j++) {
b = b + rand();
}
TC=O(N) as both input varibles a and b as no relation within for loop condition.
SC=O(1)

2.
int a = 0;
for (i = 0; i < N; i++) {
for (j = N; j > i; j--) {
a = a + i + j;
}
}
TC=O(N*N) as both input varibles a and b as no relation within for loop condition but inner loop runs
for N times and similarly outer loop also runs for N times.
SC=O(1)

3.
int i, j, k = 0;
for (i = n / 2; i <= n; i++) {
for (j = 2; j <= n; j = j * 2) {
k = k + n / 2;
}
}
TC=outer loop + inner loop O(N log N)
Outer loop stops when i=n or i>=N so O(N) ---1
Inner loop stops when j >= n  so O(log N) ---2
        iteration              j  j*2
         1                     1   2
         2                     2   2*4(8)
         3                 2*4(8)  2*4*2(16)
         4              2*2*4(16)  2*2*4*2(32)
              |
              |
              k         k*2


SC=O(1)

4.
int a = 0, i = N;
while (i > 0) {
a += i;
i /= 2;
}
TC=O(log N)
The condition inside while loop stops when i =0 || i<0
itertion        i       i/2
1               1       0.5
2               0.5       1
3               1       1.5
after k iteration
k               k       k/2

SC=O(1)

5.
for(var i=0;i<n;i++)
i*=k
TC=O(log l)
This for loop exits when i=n || i>n
iteration       i       i*k
1               1       k
2               k       k*2k
3               2k      2k*3k

after l itertion

l           (l-1)k      lk*(l-1)k

Taking higher value

l = lk^2
solve of k we get (log l)

SC=O(1)

6.
var value = 0;
for(var i=0;i<n;i++)
for(var j=0;j<i;j++)
value += 1;

TC=O(k^2)
Outer for loop runs for n times
Inner for loop runs for i times and should stop when j>i || j=i
lets say after k iteration outer loop is O(k), then inner for loop should run for k times 
SC=O(1)