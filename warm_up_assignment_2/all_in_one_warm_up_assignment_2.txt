/*
4. https://leetcode.com/problems/running-sum-of-1d-array/
*/

class Solution {
public:
    vector<int> runningSum(vector<int>& nums) {
        int temp{0}, sizeV = nums.size();
        std::vector <int> output{};
        for (int i = 0; i<sizeV; ++i){
        //temp = v1[i]+v1[i+1];
        temp +=nums[i];
        output.push_back(temp);
        //std::cout << v1[i] << " " << temp << " ";
        }
        return {output};
    }
};

/*
7. https://leetcode.com/problems/three-consecutive-odds/
*/

class Solution {
public:
    bool threeConsecutiveOdds(vector<int>& arr) {
        bool flag {false};
        size_t counter {0};
        for (int i=0;i<arr.size();++i) {
            if (arr[i] % 2 == 1) {
                std::cout << " Consuctive odd found " << arr [i] << " ";
                ++counter;
            }
            
            else if (arr[i]%2 == 0){
                counter=0;
            }

            if (counter == 3) {
                flag = true;
            }
        }
        return flag;
    }
};

/*
8. https://leetcode.com/problems/move-zeroes
*/

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        std::vector<int> output{};
        int i{};
        int size=nums.size();
        std::cout << size << std::endl;
        int counter{0};
        for (i=0;i<size;++i) {
            if (nums[i] == 0) {
                ++counter;
                //std::cout << counter <<" \t\t" << i ;
                //break;
                nums.erase(nums.begin() + i);
                --i;
                --size;
            }
        }
        for (int i = 0; i < counter;++i) {
            nums.push_back(0);
    }
        std::cout << std::endl;
        return;
    }
};

/*
1. Reverse the Number like 153 => 351 . Numbers can be negative
*/

#include <iostream>
#include <vector>

int isNumberNegavtive (int& , bool&);
int isNumberNegavtive (int& number, bool& flag) {
    if (flag) {
        return (number*(-1));
        }
        else {
            return (number);
        }
}

int main(){
    std::vector<int> result{};
    int n{}, mod{};
    bool isNumberNegative {false};
    std::cout << "Enter number: \t";
    std::cin >> n;
    if (n < 0) {
        isNumberNegative = true;
        n *= -1;
        std::cout << n << "\n";
    }
    while(n!=0){
        mod=mod*10+n%10;
        //std::cout << mod << " \t\t ";
        n/=10;
    }
    std::cout << mod << std::endl;
    std::cout << isNumberNegavtive(mod, isNumberNegative) << std::endl;
    return (0);
}


/*
3. https://leetcode.com/problems/richest-customer-wealth
*/

class Solution {
public:
    int maximumWealth(vector<vector<int>>& accounts) {
        std::vector<int> vec{};
        int size=vec.size();
        int sum{}, output{};
        for (auto i = 0; i < accounts.size(); ++i)
        {
            sum = std::accumulate(std::begin(accounts[i]), std::end(accounts[i]), 0);
            std::cout<< sum << std::endl;
            vec.push_back(sum);
        }
        std::sort(vec.begin(),vec.end());

        for(int j=size;j>0;--j)
            std::cout << vec[j] << " ";
        std::cout<< std::endl;
        output = vec.back();
        return (output);
    }
};

/*
5. https://leetcode.com/problems/jewels-and-stones
*/

class Solution {
public:
    int numJewelsInStones(string jewels, string stones) {
        size_t count{0};
        std::cout <<jewels.length() << " "  << stones.length() << std::endl;

        std::map<char, int> m{};

        for (int i=0;i<stones.length();++i) {
           m[stones[i]]++;
        }
        for(int i=0; i<jewels.length();++i) {
           count += m[jewels[i]];
        }
                 
        return (count);
    }
};

/*
6. https://leetcode.com/problems/minimum-absolute-difference
*/

class Solution 
{
public:
    vector<vector<int>> minimumAbsDifference(vector<int>& arr) 
    {
        sort(arr.begin(),arr.end());
        
        int m = INT_MAX;
        for(int i=1;i<arr.size();i++)
            m = min(m,arr[i]-arr[i-1]);

        vector<vector<int>> ans;
        for(int i=1;i<arr.size();i++)
            if(arr[i]-arr[i-1] == m)
                ans.push_back({arr[i-1],arr[i]});
        
        return ans;
    }
};